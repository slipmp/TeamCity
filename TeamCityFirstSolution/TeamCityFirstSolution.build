<?xml version="1.0" encoding="utf-8" ?>
<!--Criando um projeto para o MSBuild. É necessário passar o schema
usado e também qual será o valor padrão para ser executado.
(Explicação logo abaixo)-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
ToolsVersion="4.0" DefaultTargets="Deploy">

  <!--ItemGroup representa as variáveis globais
no arquivo de Build-->
  <ItemGroup>
    <!--É possível gerar o nome que quiser, No caso será criado as variáveis:
BuildArtifacts = Pasta que conterá os arquivos compilados
SolutionFile = Arquivo de solução do projeto-->
    <BuildArtifacts Include=".\buildartifacts\"></BuildArtifacts>
    <SolutionFile Include=".\MySolution.sln"></SolutionFile>
  </ItemGroup>

  <!--Esse ItemGroup será usado só para declarar as variáveis em
relação a Testes, que no caso será usado o NUnit.
Essa pasta ThirdyParty Precisa ser criada na raiz do projeto,
No nosso exemplo foi colocado apenas o NUnit e também
o Microsoft Web Deploy V3-->
  <ItemGroup>
    <Nunit Include=".\ThirdyParty\NUnit-2.6.3\bin\nunit-console.exe">
    </Nunit>
    <TestAssembly Include=".\buildartifacts\MySolutionWeb.Tests.dll">
    </TestAssembly>
    <TestResults Include=".\buildartifacts\TestResults.xml">
    </TestResults>
  </ItemGroup>

  <!--
Variáveis responsáveis pelo Deploy, basicamente será preciso
dos seguintes itens:
msdeploy.exe
O arquivo do package resultante da execução do msdeploy.exe
Localização do Site, que é construido à partir do Build do MSBuild.
-->
  <ItemGroup>
    <MsDeploy Include=".\ThirdyParty\Microsoft Web Deploy V3\msdeploy.exe">
    </MsDeploy>
    <WebSite Include=".\buildartifacts\_PublishedWebsites\MySolutionWeb">
    </WebSite>
    <PackageFile Include=".\buildartifacts\package\MySolutionCityWeb.zip">
    </PackageFile>
  </ItemGroup>

  <!--É possivel trocar de Debug para Release com uma PropertyGroup-->
  <PropertyGroup>
    <!--Caso não for passado nenhum parâmetro chamado Configuration,
 ele será atribuido para Debug automaticamente.
Para acessar as PropertyGroup é necessário o uso de $ ao invés de @-->
    <Configuration Condition=" '$(Configuration)' == '' ">
      Debug
    </Configuration>
  </PropertyGroup>

  <!--Targets são blocos de códigos para serem executados
É possível encara-los como se fossem métodos-->
  <Target Name="Clean">
    <RemoveDir Directories="@(BuildArtifacts)"></RemoveDir>
  </Target>

  <Target Name="Init" DependsOnTargets="Clean">
    <MakeDir Directories="@(BuildArtifacts)"></MakeDir>
  </Target>

  <Target Name="Compile" DependsOnTargets="Init">
    <!--
BuildArtifacts faz parte das variáveis globais.
Essas variáveis possuem propriedades.
Uma dessas propriedades é o FullPath
Para acessar as propriedades ao invés de usar @ é usado %
%(BuildArtifacts.FullPath) =>
C:\Slipmp\MySolution\buildartifacts\

O MSBuild aceita algumas propriedades como parâmetro, exemplos:
OutDir=Diretório de saída para o build
Configuration=Modo de compilação (Debug, Release, etc)
-->
    <MSBuild Projects="@(SolutionFile)" Targets="Rebuild"
    Properties="OutDir=%(BuildArtifacts.FullPath);
Configuration=$(Configuration)"></MSBuild>

  </Target>

  <!--Executando os testes usando NUnit-->
  <Target Name="Test" DependsOnTargets="Compile">
    <Exec Command="@(NUnit) @(TestAssembly) /xml=@(TestResults)">
    </Exec>
  </Target>

  <!--Esse target será responsável pela criação do package
que por sua vez será usado para o deploy no IIS-->
  <Target Name="Package" DependsOnTargets="Clean;Init;Compile;Test;">
    <PropertyGroup>
      <!--RootDir contém apenas a letra do disco rígido.
Directory possui o endereço completo com exceção da letra
do disco rígido.
É necessário passar dessa maneira.-->
      <PackageDir>
        %(PackageFile.RootDir)%(PackageFile.Directory)
      </PackageDir>
      <Source>%(Website.FullPath)</Source>
      <Destination>%(PackageFile.FullPath)</Destination>
    </PropertyGroup>
    <MakeDir Directories="$(PackageDir)"></MakeDir>
    <Exec Command='"@(MsDeploy)" -verb:sync -source:iisApp="$(Source)"
-dest:package="$(Destination)"'>
    </Exec>
  </Target>

  <!--Agora que o arquivo MySolutionWeb.zip foi criado (pacote completo
da aplicação), é necessário instala-lo de forma automática.
E para isso será preciso que o servidor que receberá a aplicação possua
instalado o Microsoft Web Deploy.
Link de download :
http://www.microsoft.com/web/downloads/platform.aspx
O nome da ferramenta é "Web Deployment Tool" ou em português
"Ferramenta de implantação da Web"
Após a instalação no servidor é necessário verificar se o
Serviço do Windows responsável pelo Web Deploy está rodando.
Nome em português: Serviço do Agente de Implantação da Web
Nome em inglês: Web Deployment Agent Service

Também será necessário criar um novo site no IIS para
receber nossa aplicação. No caso o site se chamará MySolutionWeb
e estará apontando para um diretório físico vazio dentro da pasta inetpub.
Quando o Build Script for executado os arquivos serão copiados para esse diretório.
-->

  <Target Name='Deploy' DependsOnTargets='Clean;Init;Compile;Test;Package'>
    <PropertyGroup>
      <Source>%(PackageFile.FullPath)</Source>
    </PropertyGroup>
    <!--Essa linha de código usa o arquivo zip gerado pelo próprio
MSDeploy no target de "Package" e implanta esse pacote no IIS
em um site chamado MySolutionWeb-->
    <Exec Command='"@(MsDeploy)" -verb:sync -source:package="$(Source)"
 -dest:iisApp=MySolutionWeb'></Exec>
  </Target>
</Project>
